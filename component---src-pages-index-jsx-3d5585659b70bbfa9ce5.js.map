{"version":3,"sources":["webpack:///./src/pages/index.jsx","webpack:///./data/SiteConfig.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/layout/index.jsx","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/PostListing/PostListing.jsx","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/SEO/SEO.jsx"],"names":["Index","render","postEdges","this","props","data","allMarkdownRemark","edges","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_layout__WEBPACK_IMPORTED_MODULE_3__","location","className","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","title","_data_SiteConfig__WEBPACK_IMPORTED_MODULE_6___default","siteTitle","_components_SEO_SEO__WEBPACK_IMPORTED_MODULE_5__","_components_PostListing_PostListing__WEBPACK_IMPORTED_MODULE_4__","Component","pageQuery","module","exports","siteTitleShort","siteTitleAlt","siteLogo","siteUrl","pathPrefix","siteDescription","siteRss","siteFBAppID","googleAnalyticsID","disqusShortname","postDefaultCategoryID","dateFromFormat","dateFormat","userName","userTwitter","userLocation","userAvatar","userDescription","userLinks","label","url","iconClassName","copyright","themeColor","backgroundColor","249","e","t","m","__webpack_require__","default","MainLayout","getLocalTitle","capitalize","string","charAt","toUpperCase","slice","_data_SiteConfig__WEBPACK_IMPORTED_MODULE_4___default","currentPath","pathname","replace","indexOf","children","react__WEBPACK_IMPORTED_MODULE_2___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","name","content","ProdPageRenderer","_ref","pageResources","_loader__WEBPACK_IMPORTED_MODULE_3__","getResourcesForPathname","react__WEBPACK_IMPORTED_MODULE_0___default","_page_renderer__WEBPACK_IMPORTED_MODULE_2__","propTypes","prop_types__WEBPACK_IMPORTED_MODULE_1___default","shape","isRequired","__webpack_exports__","l","261","r","n","i","o","s","c","d","createContext","object","func","PostListing","getPostList","postList","forEach","postEdge","push","path","node","fields","slug","tags","frontmatter","cover","date","excerpt","timeToRead","map","post","gatsby__WEBPACK_IMPORTED_MODULE_3__","to","key","274","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","strArray","resultArray","match","length","first","shift","component","TypeError","str","join","parts","split","arguments","call","SEO","description","image","postURL","_this$props","postNode","postPath","postSEO","postMeta","url_join__WEBPACK_IMPORTED_MODULE_3___default","blogURL","schemaOrgJSONLD","@context","@type","alternateName","itemListElement","position","item","@id","headline","type","JSON","stringify","property","react__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"component---src-pages-index-jsx-3d5585659b70bbfa9ce5.js","sourcesContent":["import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport SEO from \"../components/SEO/SEO\";\nimport config from \"../../data/SiteConfig\";\n\nclass Index extends React.Component {\n  render() {\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n    return (\n      <Layout location={this.props.location}>\n        <div className=\"index-container\">\n          <Helmet title={config.siteTitle} />\n          <SEO />\n          <PostListing postEdges={postEdges} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default Index;\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [fields___date], order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n","module.exports = {\n  siteTitle: \"Gatsby Advanced Starter\", // Site title.\n  siteTitleShort: \"GA Starter\", // Short site title for homescreen (PWA). Preferably should be under 12 characters to prevent truncation.\n  siteTitleAlt: \"GatsbyJS Advanced Starter\", // Alternative site title for SEO.\n  siteLogo: \"/logos/logo-1024.png\", // Logo used for SEO and manifest.\n  siteUrl: \"https://vagr9k.github.io\", // Domain of your website without pathPrefix.\n  pathPrefix: \"/gatsby-advanced-starter\", // Prefixes all links. For cases when deployed to example.github.io/gatsby-advanced-starter/.\n  siteDescription: \"A GatsbyJS stater with Advanced design in mind.\", // Website description used for RSS feeds/meta description tag.\n  siteRss: \"/rss.xml\", // Path to the RSS file.\n  siteFBAppID: \"1825356251115265\", // FB Application ID for using app insights\n  googleAnalyticsID: \"UA-47311644-5\", // GA tracking ID.\n  disqusShortname: \"https-vagr9k-github-io-gatsby-advanced-starter\", // Disqus shortname.\n  postDefaultCategoryID: \"Tech\", // Default category for posts.\n  dateFromFormat: \"YYYY-MM-DD\", // Date format used in the frontmatter.\n  dateFormat: \"DD/MM/YYYY\", // Date format for display.\n  userName: \"Advanced User\", // Username to display in the author segment.\n  userTwitter: \"\", // Optionally renders \"Follow Me\" in the UserInfo segment.\n  userLocation: \"North Pole, Earth\", // User location to display in the author segment.\n  userAvatar: \"https://api.adorable.io/avatars/150/test.png\", // User avatar to display in the author segment.\n  userDescription:\n    \"Yeah, I like animals better than people sometimes... Especially dogs. Dogs are the best. Every time you come home, they act like they haven't seen you in a year. And the good thing about dogs... is they got different dogs for different people.\", // User description to display in the author segment.\n  // Links to social profiles/projects you want to display in the author segment/navigation bar.\n  userLinks: [\n    {\n      label: \"GitHub\",\n      url: \"https://github.com/Vagr9K/gatsby-advanced-starter\",\n      iconClassName: \"fa fa-github\"\n    },\n    {\n      label: \"Twitter\",\n      url: \"https://twitter.com/Vagr9K\",\n      iconClassName: \"fa fa-twitter\"\n    },\n    {\n      label: \"Email\",\n      url: \"mailto:vagr9k@gmail.com\",\n      iconClassName: \"fa fa-envelope\"\n    }\n  ],\n  copyright: \"Copyright © 2017. Advanced User\", // Copyright string for the footer of the website and RSS feed.\n  themeColor: \"#c62828\", // Used for setting manifest and progress theme colors.\n  backgroundColor: \"#e0e0e0\" // Used for setting manifest background color.\n};\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.NODE_ENV !== `production`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport config from \"../../data/SiteConfig\";\nimport \"./index.css\";\n\nexport default class MainLayout extends React.Component {\n  getLocalTitle() {\n    function capitalize(string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n    const pathPrefix = config.pathPrefix ? config.pathPrefix : \"/\";\n    const currentPath = this.props.location.pathname\n      .replace(pathPrefix, \"\")\n      .replace(\"/\", \"\");\n    let title = \"\";\n    if (currentPath === \"\") {\n      title = \"Home\";\n    } else if (currentPath === \"tags/\") {\n      title = \"Tags\";\n    } else if (currentPath === \"categories/\") {\n      title = \"Categories\";\n    } else if (currentPath === \"about/\") {\n      title = \"About\";\n    } else if (currentPath.indexOf(\"posts\")) {\n      title = \"Article\";\n    } else if (currentPath.indexOf(\"tags/\")) {\n      const tag = currentPath\n        .replace(\"tags/\", \"\")\n        .replace(\"/\", \"\")\n        .replace(\"-\", \" \");\n      title = `Tagged in ${capitalize(tag)}`;\n    } else if (currentPath.indexOf(\"categories/\")) {\n      const category = currentPath\n        .replace(\"categories/\", \"\")\n        .replace(\"/\", \"\")\n        .replace(\"-\", \" \");\n      title = `${capitalize(category)}`;\n    }\n    return title;\n  }\n  render() {\n    const { children } = this.props;\n    return (\n      <div>\n        <Helmet>\n          <title>{`${config.siteTitle} |  ${this.getLocalTitle()}`}</title>\n          <meta name=\"description\" content={config.siteDescription} />\n        </Helmet>\n        {children}\n      </div>\n    );\n  }\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathname(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, { withPrefix, push, replace, navigateTo } from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  push,\n  replace,\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","import React from \"react\";\nimport { Link } from \"gatsby\";\n\nclass PostListing extends React.Component {\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      });\n    });\n    return postList;\n  }\n  render() {\n    const postList = this.getPostList();\n    return (\n      <div>\n        {/* Your post list here. */\n        postList.map(post => (\n          <Link to={post.path} key={post.title}>\n            <h1>{post.title}</h1>\n          </Link>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();\n  else if (typeof define === 'function' && define.amd) define(definition);\n  else context[name] = definition();\n})('urljoin', this, function () {\n\n  function normalize (strArray) {\n    var resultArray = [];\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') { continue; }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n\n    }\n\n    var str = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n\n});\n","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover;\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      );\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n"],"sourceRoot":""}